
:前言
保存key的容器_用轮盘的方式来选择
int GetReadBoxIndex()
{
	int32 n1 = CSysTime::Instance()->GetCurSecond();
	int32 n2 = n1 % ([间隔时间] * [容器总数]);
	int32 index = n2 / [间隔时间];
	return index;
}

int GetWriteBoxIndex()
{
	int32 n1 = (GetReadBoxIndex() + 2) % [容器总数];
	return n1;
}


::非离线数据的操作_逻辑

:数据第一次加载_逻辑
	如果redis上没有, 就从db上加载

:数据修改_逻辑
	if key存在
		直接修改redis的数据,并设置6分钟有效时间
	else
		先从mysql加载数据 到 redis
		修改redis数据,并设置6分钟有效时间
	endif
	将该玩家id 保存到 redis 的  Need2SaveKey .例如:sadd("Need2SaveKey" , "本次修改的key")

:数据删除_逻辑

:定时保存_逻辑
	5分钟 保存一次
	通过 SPOP("Need2SaveKey") 获取 一个 key
	将这个 key 对应的 数据 保存到 mysql 中


::离线数据的操作_逻辑

:数据第一次加载_逻辑
	如果redis上没有, 就从db上加载

:数据修改_逻辑
	if key存在
		直接修改redis的数据
	else
		从db上加载 ,并 修改
	endif
	将该玩家id 保存到 redis 的 Need2SaveKey2 .例如:sadd("Need2SaveKey2" , "本次修改的key")

:数据删除_逻辑
	用不删除

:定时保存_逻辑
	30分钟 保存一次
	通过 SPOP("Need2SaveKey2") 获取 一个 key
	将这个 key 对应的 离线数据 保存到 mysql 中

























