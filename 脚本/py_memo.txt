
//前言
#if

:python基础教程
http://www.runoob.com/python/python-strings.html

:python qt
@软件的安装
http://www.cnblogs.com/zouzf/p/4308912.html

安装包
https://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.3/


@知识储备
QListWidget的一些常用函数
QTextBrowser 常用函数
QTextEdit
http://www.kuqin.com/qtdocument/qtextedit.html#setCursorPosition

#endif

//常用函数
#if


import os
import platform
import time


#获取操作系统类型
g_is_win_platform =  False
if platform.uname()[0] == "Windows":
	g_is_win_platform =  True

#获取_机器名	
import getpass
g_str_name = getpass.getuser()
	
#设置工作目录
g_old_path = ""
def SetPath():
	global g_old_path
	g_old_path = os.getcwd()
	os.chdir(os.path.split(os.path.realpath(__file__))[0] )
	
def ResetPath():
	os.chdir(g_old_path )	
	

#定时	
def test2():
	time.sleep(2)
	os.system("pause")

#参数
def test1():
	if len(sys.argv) == 1:
		os.system("pause")
		return
	str_argv_1 = sys.argv[1]


def encode_file(str_name):
	f_ = open(str_name , "rb")
	buff_ = f_.read()
	f_.close()
	str_ = base64.b64encode(buff_)
	
	f_new = open("zhou.txt" , "w")
	f_new.write(str_)
	f_new.close()
	
	
def decode_file(str_src_name , str_dst_name):
	f_ = open(str_src_name , "r")
	buff_ = f_.read()
	f_.close()
	str_ = base64.b64decode(buff_)
	
	f_new = open(str_dst_name , "wb")
	f_new.write(str_)
	f_new.close()
	
#转utf
def ChangeFile2Utf( file_ ):
	import codecs
	f_0 = open(file_ ,"r")
	str_ = f_0.read(-1)
	f_0.close()
	print len(str_)
	str_ = str_.decode("gbk")
	f_1 = codecs.open( file_, "w", "utf-8-sig")
	f_1.write(str_)
	f_1.close()
	
	
if __name__ == "__main__":
	pass
	
#endif

//下划线 和 驼峰 互转
#if

import hbb_tool

g_str_ = "huang_binbin"


#下划线转驼峰
def Change1():
	is_find = True
	new_str_ = ""
	for ch in g_str_:
		if is_find == True:
			ch = ch.upper()
		
		if ch == '_':
			is_find = True
		else:
			is_find = False
			new_str_ += ch	
	print new_str_
	return new_str_

#驼峰转下划线
def Change2():
	is_big = True
	new_str_ = ""
	for ch in g_str_:
		if ch.isupper() :
			if is_big == False:
				new_str_ += '_'
			is_big = True
		else:
			is_big = False
		
		new_str_ += ch.lower()
	print new_str_
	return new_str_			

def AutoChange():
	ch = g_str_[0:1]
	if ch.isupper() :
		return Change2()
	else:
		return Change1()
		
g_str_ = hbb_tool.GetText()		
g_str_ = AutoChange()
hbb_tool.SetText(g_str_)

#endif

//反射
#if
class ManagerServer:
	#定义基本属性
	dict_ = {}
	path_ = ''
	#定义构造方法
	def __init__(self):
		pass
		
		
class MailServer:
	#定义基本属性
	dict_ = {}
	path_ = ''
	#定义构造方法
	def __init__(self):
		pass


def g_write2file(o_server):
	pass


if __name__ == "__main__":

	for one_ in dir():
		if one_ == "__builtins__":
			break
	
		#筛选出指定类
		if one_.find("Server") >= 0:
			print one_
			one_deal = getattr(sys.modules[__name__] ,one_ )()
			g_write2file(one_deal)

#end

//arp相关操作
#if

import os
import sys
import ctypes

#设置工作目录
g_old_path = ""
def SetPath():
	global g_old_path
	g_old_path = os.getcwd()
	os.chdir(os.path.split(os.path.realpath(__file__))[0] )
	
def ResetPath():
	os.chdir(g_old_path )
	


STD_INPUT_HANDLE = -10
STD_OUTPUT_HANDLE= -11
STD_ERROR_HANDLE = -12

FOREGROUND_BLACK = 0x0  
FOREGROUND_BLUE = 0x01 # text color contains blue.  
FOREGROUND_GREEN= 0x02 # text color contains green.  
FOREGROUND_RED = 0x04 # text color contains red.  
FOREGROUND_INTENSITY = 0x08 # text color is intensified.  

BACKGROUND_BLUE = 0x10 # background color contains blue.  
BACKGROUND_GREEN= 0x20 # background color contains green.  
BACKGROUND_RED = 0x40 # background color contains red.  
BACKGROUND_INTENSITY = 0x80 # background color is intensified.  

class Color:
	std_out_handle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)
	
	def set_cmd_color(self, color, handle=std_out_handle):
		"""(color) -> bit 
		Example: set_cmd_color(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY) 
		"""  
		bool = ctypes.windll.kernel32.SetConsoleTextAttribute(handle, color)
		return bool
	
	def reset_color(self):
		self.set_cmd_color(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)
	
	def print_red_text(self, print_text):  
		self.set_cmd_color(FOREGROUND_RED | FOREGROUND_INTENSITY)
		print print_text
		self.reset_color()
		
	def print_green_text(self, print_text):  
		self.set_cmd_color(FOREGROUND_GREEN | FOREGROUND_INTENSITY)  
		print print_text
		self.reset_color()
	
	def print_blue_text(self, print_text):
		self.set_cmd_color(FOREGROUND_BLUE | FOREGROUND_INTENSITY)
		print print_text
		self.reset_color()
			
	def print_red_text_with_blue_bg(self, print_text):
		self.set_cmd_color(FOREGROUND_RED | FOREGROUND_INTENSITY| BACKGROUND_BLUE | BACKGROUND_INTENSITY)
		print print_text
		self.reset_color()
	
#mac_地址_表
g_list = [ 
["hbb","黄斌斌","00-00-00-00-00-00"],
]

def getMyMac(str_my_ip):
	str_file = "ipconfig.txt"
	os.system("ipconfig /all > " + str_file)
	f_ = open(str_file , "r")
	list_ = f_.readlines()
	f_.close()
	os.system("del " + str_file)
	
	for index_ in range( len(list_) ):
		one_ = list_[index_]
		if one_.find(str_my_ip) >= 0:
			return list_[index_ - 4]

	return ""

g_str_ret = ""
def findOneIP(list_ , str_mac):
	global g_str_ret
	g_str_ret = ""
	str_mac = str_mac.lower()
	for one_ in list_:
		one_list = one_.split()
		if len(one_list) != 3:
			continue

		if one_list[1] == str_mac:
			g_str_ret = one_list[0]
	return g_str_ret
	
if __name__ == "__main__":
	SetPath()
	
	
	f_bak = open("arp_bak.txt" , "r")
	list_bak = f_bak.readlines()
	f_bak.close()
	
	str_file = "arp.txt"
	os.system("arp -a > " + str_file)
	f_ = open(str_file , "r")
	list_ = f_.readlines()
	f_.close()
	os.system("del " + str_file)
	str_my_ip = list_[1].split()[1]
	str_my_mac = getMyMac(str_my_ip)
	cr = Color()
	cr.print_green_text("本地ip信息:".decode("utf").encode("gbk"))
	print str_my_ip
	print str_my_mac
	#cr.print_green_text(str_my_ip)
	#cr.print_green_text(str_my_mac)
	
	print "==========="
	print "输入名字_拼音_首字母".decode("utf").encode("gbk")
	print "例如:小明 等于 xm".decode("utf").encode("gbk")
	str_tip = "Input:"
	while 1:
		str_name = raw_input(str_tip)
		str_tip = "again input:"
		
		is_find = False
		for one_ in g_list:
			if str_name == one_[0]:
				str_find_mac = one_[2].upper()
				
				str_ip = ""
				#判断是否为自己
				if str_my_mac.find(str_find_mac) >= 0:
					str_ip = str_my_ip
				elif findOneIP(list_ , str_find_mac) != "":
					str_ip = g_str_ret
				elif findOneIP(list_bak , str_find_mac) != "":#查询备份_arp_数据
					cr.print_red_text("历史记录(本次查找失败):".decode("utf").encode("gbk"))
					str_ip = g_str_ret
					
				
				if str_ip != "":
					is_find = True
					str_log = one_[0] + " " + one_[1] + " " + str_ip
					cr.print_red_text(str_log.decode("utf").encode("gbk"))
		
		if is_find == False:
			print "目标未登记mac地址,可联系hbb".decode("utf").encode("gbk")
		
		print "---------"
	ResetPath()

#endif







