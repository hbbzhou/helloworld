
//文档
#if
lua与c 交互
http://www.kancloud.cn/thinkphp/lua-guide/43809

lua 文中文档
http://cloudwu.github.io/lua53doc/

lua安装
http://www.cnblogs.com/osyun/archive/2012/01/12/2320698.html

//tolua 的使用
http://blog.csdn.net/devday/article/details/5796610
https://github.com/dabing1022/Blog/tree/master/tolua
http://www.cppblog.com/heath/archive/2009/01/18/72254.html

lua_说明文档
http://book.luaer.cn/
#end

//调试
#if
print ( "#####" , debug.getinfo(1).name , debug.getinfo(1).currentline )


function trace (event, line)
    local s = debug.getinfo(2).short_src
    print(s .. ":##########" .. line)
end

function deal_pve_msg(n_mode)
	debug.sethook(trace, "l")
	local nRet = 0
	if n_mode == 1 then
		nRet = 4
	end
	
	if n_mode > 10 then
		nRet = 5
	end
	
	if n_mode > 20 then
		nRet = 5
	end

	debug.sethook()
end

--测试_代码
deal_pve_msg(1)

#end

//加载dll
#if
package.path = package.path ..';protobuf\\?.lua;proto\\?.lua';
package.cpath = package.cpath .. ';lib\\?.dll'

local lib_test =require "testlib"

print(lib_test.add(1, 2) )

#endif

//反射
#if
--lua 反射
for k,v in pairs(lib_test) do
	print(k,v)
end


for k,v in pairs(lib_test) do
	--print(k,v)
	if k == "add" then
		print(v(2,2) )
		break
	end
end

function ShowTable(obj)
	local strRet = ""
	for k,v in pairs(obj) do
		if type(v) == "table" then
			strRet = strRet .. k .. ":\n{\n"
			strRet = strRet .. ShowTable(v)
			strRet = strRet .. "}\n"
		else
			strRet = strRet .. k .. ":"
			strRet = strRet .. v .. "\n"
		end
	end
	return strRet
end

#endif

//位操作
#if

local bit =require "bit"

--bitIndex 范围[0-31]
function GetBit(srcNum, bitIndex )
	return bit.band(bit.rshift(srcNum, bitIndex), 1)
end

function SetBit(srcNum, bitIndex )
	return bit.bor(bit.lshift(1, bitIndex), srcNum)
end

function ResetBit(srcNum, bitIndex )
	local n1 = bit.bnot( bit.lshift(1, bitIndex) )
	return bit.band(n1, srcNum)
end


#end

//protobuff
#if 

-- 如果require失败，请参考lua中`package.path`的使用
local pb =require("Test_pb")

local test = pb.Test()
test.id = 1
test.name = "hello"
test.ary:append(1) -- 内置类型的repeated使用append()
test.ary:append(2)

local foo1 = pb.foos:add() -- 复合类型的repeated使用add()
foo1.fid = 1
foo1.fname = "foo1"
local foo2 = pb.foos:add()
foo2.fid = 2
foo2.fname = "foo2"
-- 序列化为字符串
local pb_data =test:SerializeToString()

-- 从字符串解析
local recover = pb.Test()
recover:ParseFromString(pb_data)
print(recover.id, recover.foos[1].name, recover.foos[2].name) 
#endif

//常用函数
#if

//字符串_切片
function string:split(sep)  
    local sep, fields = sep or ":", {}  
    local pattern = string.format("([^%s]+)", sep)  
    self:gsub(pattern, function (c) fields[#fields + 1] = c end)  
    return fields  
end 

//查找字符串
function StrFind(str_src , str_dst)
	for i_ = 1 , #str_src do
		local end_i = i_ + #str_dst - 1
		if end_i > #str_src then
			return 0
		end
		
		local b_ok = true
		for key_i = 1 , #str_dst do
			local begin_i = i_ + key_i - 1;
			if string.sub(str_src , begin_i , begin_i) ~= string.sub(str_dst , key_i , key_i ) then
				b_ok = false
				break;
			end
		end
		
		if b_ok == true then
			return i_
		end
	end
	return 0
end

#end

//base64
#if

local function encodeBase64(source_str)  
    local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'  
    local s64 = ''  
    local str = source_str  
  
    while #str > 0 do  
        local bytes_num = 0  
        local buf = 0  
  
        for byte_cnt=1,3 do  
            buf = (buf * 256)  
            if #str > 0 then  
                buf = buf + string.byte(str, 1, 1)  
                str = string.sub(str, 2)  
                bytes_num = bytes_num + 1  
            end  
        end  
  
        for group_cnt=1,(bytes_num+1) do  
            local b64char = math.fmod(math.floor(buf/262144), 64) + 1  
            s64 = s64 .. string.sub(b64chars, b64char, b64char)  
            buf = buf * 64  
        end  
  
        for fill_cnt=1,(3-bytes_num) do  
            s64 = s64 .. '='  
        end  
    end  
  
    return s64  
end  
  
local function decodeBase64(str64)  
    local b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'  
    local temp={}  
    for i=1,64 do  
        temp[string.sub(b64chars,i,i)] = i  
    end  
    temp['=']=0  
    local str=""  
    for i=1,#str64,4 do  
        if i>#str64 then  
            break  
        end  
        local data = 0  
        local str_count=0  
        for j=0,3 do  
            local str1=string.sub(str64,i+j,i+j)  
            if not temp[str1] then  
                return  
            end  
            if temp[str1] < 1 then  
                data = data * 64  
            else  
                data = data * 64 + temp[str1]-1  
                str_count = str_count + 1  
            end  
        end  
        for j=16,0,-8 do  
            if str_count > 0 then  
                str=str..string.char(math.floor(data/math.pow(2,j)))  
                data=math.mod(data,math.pow(2,j))  
                str_count = str_count - 1  
            end  
        end  
    end  
  
    local last = tonumber(string.byte(str, string.len(str), string.len(str)))  
    if last == 0 then  
        str = string.sub(str, 1, string.len(str) - 1)  
    end  
    return str  
end  

#end

//proto//反射
#if

function ShowProto(obj)
	local strRet = ""
	for k,v in pairs(obj) do
	
		if type(k) == "table" then
			if type(v) == "table" then
				strRet = strRet .. " \n"
				strRet = strRet .. k.name .. "={\n"
				strRet = strRet .. ShowProto(v)
				strRet = strRet .. "}\n"
			else
				strRet = strRet .. k.name .. "=" .. v .. "\n"
			end
		elseif type(k) == "number" then
			strRet = strRet .. ShowProto(v)
		end
		
		if k == "_fields" then
			strRet = strRet .. ShowProto(v)
		end
	end
	return strRet
end

#end

//proto//判断成员是否存在
#if

function IsMemberInProto(obj , str_member)
	for k,v in pairs(obj) do
		if type(k) == "table" then
			if k.name == str_member then
				return true
			end
		end

		if k == "_fields" then
			return IsMemberInProto(v , str_member )
		end
	end
	return false
end


function UpdateRoleInfoNtf(msgBody_)
	local ack = ClientProto.update_role_info_ntf()
	ack:ParseFromString(msgBody_);
	print(tostring(ack))
	
	if IsMemberInProto(ack , "playername") then
		print("playername ok")
	end
	
	if IsMemberInProto(ack , "lv") then
		print("lv ok")
	end
	
	if IsMemberInProto(ack , "exp") then
		print("exp ok")
	end
	
end

local ack = ClientProto.update_role_info_ntf()
ack.exp = 10
UpdateRoleInfoNtf(ack:SerializeToString() )
#end








