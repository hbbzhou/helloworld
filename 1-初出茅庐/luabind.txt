
#<<用VS2010编译luabind>>
from http://www.cppblog.com/eros/archive/2009/04/29/81508.aspx

学了一段时间Lua，显然直接在项目中使用是很不方便，google了一下，似乎大家都对luabind这个lua包装类青睐有加，于是我也随大势想用用看。

先做好准备工作，下载了luabin 0.8.1源码，Boost 1.3.8源码和lua 5.1.4源码，编译环境是VS2008 SP1。之前在网上看到一些文章说这些开源软件之间的版本依赖比较敏感，可能会有这样那样的问题，动手之前有些惶恐。
幸运的是，编译过程很顺利，如下：

1.编译lua 5.1.4
进入VS2008的命令行工具，定位到lua的源码目录下，执行命令etc\luavs.bat，没什么问题的话很快就可以编译好lua，得到lua51.lib和lua51.dll。

2.编译luabind
解压下载回来的luabind压缩包，假设解压到d:\luabind-0.8.1\，Boost解压到d:\boost 1_38_0\，lua解压到d:\lua 5.1.4\
在VS中新建一个静态库项目，将d:\luabind-0.8.1\src下的源码全部添加到项目中，然后在项目中新建luabind和luabind\detail\两个虚拟文件夹，对应的将d:\luabind-0.8.1\luabind和d:\luabind-0.8.1\luabind\detail下的文件添加到文件夹中。

然后为项目添加附加包含目录，右键点击项目节点->属性->配置属性->C\C++标签下，在附加包含目录中填入d:\luabind-0.8.1\;d:\boost 1_38_0\;d:\lua 5.1.4\src\。然后修改项目字符集为多字节字符集。
准备就绪，生成项目。在我的环境中编译很顺利，没有出现任何问题，成功后会得到luabind.lib







<<在linux 下编译luabind>>
1.下载 lua5_1_4_Sources.tar.gz 版本 http://www.lua.org/versions.html
操作步骤:
tar -zxvf lua5_1_4_Sources.tar.gz
cd lua5.1/src
make
cd ../lib
ls


2.下载 boost_1_38_0.tar.bz2
操作步骤:
tar -jxvf boost_1_38_0.tar.bz2

3.下载 luabind-0.9.1.zip
操作步骤:
解压步骤(略)

4.编写makefile

cmake_minimum_required(VERSION 2.6)
PROJECT (MYTEST CXX)
INCLUDE_DIRECTORIES("/home/hbb/hbb_down/boost_1_38_0"
"/home/hbb/hbb_down/lua5.1/src" "/home/hbb/hbb_down/luabind-0.9.1")

#编译宏---
#add_definitions(-DDEBUG -DMYSQLPP_MYSQL_HEADERS_BURIED)
#add_definitions(-DHBBDEF )

#指定编译器---
SET(CMAKE_CXX_COMPILER "g++")

#设置编译选项---
SET(CMAKE_CXX_FLAGS "-std=c++11 -g")

 

aux_source_directory("/home/hbb/hbb_down/luabind-0.9.1/src" SRC_LIST)
MESSAGE(STATUS "------------------------------- "${SRC_LIST}) 
add_library(luabind SHARED ${SRC_LIST})


5.使用libluabind.so文件
(略)

6. 可能出现的错误
将boost更新到1.53时, 发现luabind死活编译不过, 报错如下
error: missing binary operator before token "("
根据老外的描述, boost中的BOOST_PP_ITERATION_FLAGS从1.49版本后发生了一些变化.
方案:
修改call_function.hpp, call_member.hpp及wrapper_base.hpp
去掉#elif BOOST_PP_ITERATION_FLAGS() == 1
更换为
#else
#if BOOST_PP_ITERATION_FLAGS() == 1
然后在源码底部加一个#endif即可

