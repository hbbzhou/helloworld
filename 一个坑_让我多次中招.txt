
:bug0024
再次死机,mapAccountLv.rbegin()->first
该代码在2020年5月29号提交.
该代码出现在 启服的配置表校验函数中! 可能当时就是这么计划的!从而确保该配置不能为空.(但是时间久了,什么都会改变的)(代码还是要严谨)
[10:50 2021/3/17]

:bug0023
今天在食堂大声议论老板,带了些负能量!
接着 我向老板道歉了!(场面太尴尬了,旁边人又多!)(但是有过失,当面道歉还是必要的)
哎,如何做到不BB! 真的刻不容缓了!
[22:26 2020/09/02]


:bug0022
2层for 循环都用了 变量 i 
[14:31 2020/4/23] 各种花样作死

:bug0021
再次死机
int32_t iRandNum = sfw::UtilRandom::random32(0, vecTemp.size() - 1);
return vecCur[iRandNum];
[14:24 2020/4/23] 拷贝代码导致


:bug0020
redis 保存时的key 与 删除的key  不一致 导致数据未能删除! 从而引发海量的内存增长!
[14:20 2020/4/23]


:bug0019
:又死机了
在非主线程的函数 调用了内存池的接口
因为主线程也调用了 内存池接口
[16:44 2019/7/11] 前几天写了个死机bug

:bug0018
:有时候会无理取闹
B同事进行使用某个软件没有用快捷键,我看到并在 指责他操作不熟练
实际上:B同事没有问题; 是我有问题;我不能在错了
[12:01 2019/6/26] 今天回忆起来了


:bug0017
:有时候会无理取闹
A同事进行excel操作,我看到并在 指责他不会操作excel
实际上:A同事没有问题;是我有问题;我不能在错了
[12:01 2019/6/26] 今天回忆起来了



:bug0016
:函数的误区
proto 中的 CopyFrom; 2个不一样的类也能用, 但是运行会死机
[11:51 2019/5/16] 入坑了



:bug0015
:一个设计协议的问题
设计方案一:
主动请求A 协议, 获取全部数据
主动请求B 协议, 获取部分数据 [前端自己判断 数据是否有变化等情况; 千万不要无脑请求]
设计方案二:
主动请求A 协议, 获取全部数据
推送C 协议, 告知前端修改部分数据

差异分析:
方案一,适合用 demo模块[认定这个功能过段时间就废弃的]
方案一,后端处理简单.不用考虑数据实时改变的问题.让前端自己判断并主动更新
备注:随着界面需求的修改.导致[B 协议] 被废弃了. 从而引起bug.
总结:尽量用方案二. 让后端驱动 数据改变的时机.
反面教材:如果用方案一. 需求改个几版本,有很多前端会偷懒,无脑请求,疯狂请求[B协议].
[21:20 2019/4/8] 入坑了.唉,前端UI需求修改了,维护的人也换了.他们靠不住了



:bug0014
:逻辑混乱,头脑不清楚
代码一:
	//重新计算长度
	if (nLen == 0 ) {
		//修改变量//错误枚举
	}
	else if ( nLen >= (uint32) _SNK_CAllConfig()->GetSeting().m_nMaxNameLength) {
		//修改变量//错误枚举
	}
	//###这个应该是 else if //!!!!!!
	if (_SNK_CAllConfig()->FindSensitiveWord(oChangeNameReq.newname()) == false){
		//正确的情况//返回正确值
		return;
	}
	else {
		//修改变量//错误枚举
	}

	//异常的消息处理//返回错误值
	return;

	
代码二:
	//重新计算长度
	if (nLen == 0 ) {
		//修改变量//错误枚举
	}
	else if ( nLen >= (uint32) _SNK_CAllConfig()->GetSeting().m_nMaxNameLength) {
		//修改变量//错误枚举
	}
	else if (_SNK_CAllConfig()->FindSensitiveWord(oChangeNameReq.newname()) == true){
		//修改变量//错误枚举
	}
	else {
		//修改变量//错误枚举
	}

	if(标识判断){
		//异常的消息处理//返回错误值
		return;
	}
	
	//正确的情况//返回正确值
	return;
	
总结: 代码一有 逻辑bug:
解决方案:错误的情况都return了. 正确的情况永远最后处理.
[16:29 2019/3/30]入坑


:忘记如何制作excel图表
花1个小时才 回忆起来.(X,Y 散列点+折线)
备注:忘记了
[15:02 2019/3/23]入坑



:bug0013
又写出死机bug.指针判空了,居然没有return; 
//==
CHero* pHero = pFindRole->GetHeroMgr().FindHero( atoi(strArvg1.c_str()) );
if (pHero == NULL) {
	o_ack.set_ret(1);
	pRole->Send(nSendID, o_ack);
}
uint32 n1 = pHero->GetCombatValue();
o_ack.set_ret(0);
//==
[17:43 2019/3/22] 入坑


:bug0012
移动多行代码,将它放到前面几行.结果其中有1行代码不能放前面的.
解决方案:代码不能一把抓,要一行一行操作,左值右值看清楚
总结:没救了
[2019/1/14]发现

:bug0011
写出了,很傻的代码. 怎么回事
SPlotPeripheral & refData = pRole->FixPlotPeripheral();
for (int32 i = 0; i < oReq.badge_id_size(); ++i) {
	if ((size_t)i >= refData.m_aBadgeID.size()) {
		refData.m_aBadgeID[i] = oReq.badge_id(i);
	}
}
总结:没救了
[2019/1/9]发现

:bug0010
说xx事情是无法实现的.
后来有人百度了,它是可以实现的.
总结:以后只说_百度不到解决方案
[2018/11/27]发现

:bug0009
修改技能解锁的功能, 结果技能解锁了没有通知前端
总结:后端逻辑ok,同时还要告知前端
[2018/10/12]入坑

:bug0008
int32 nCanAddNum = nCurT - m_oSkillPoint.m_nRecoveryTimeOfPonit / nStep;
int32 nCanAddNum = (nCurT - m_oSkillPoint.m_nRecoveryTimeOfPonit) / nStep;
真怀疑写代码时候是不是 傻了
[2018/9/29]入坑

:bug0007
我遗留了地下生存赛中的某个需求
看文档的时候 遗留了.
[2018/9/28]入坑

:bug0006
保存某场战斗的血量,用千分比. (1/2000 的血量, 保存后 就成 0/2000)
[2018/9/27]入坑


:bug0004
if (pCfgSkill->m_nDisplay == 1)
其实我想要做的是if (pCfgSkill->m_nDisplay == 0)
[2018/9/21]入坑

:bug0003
if (m_oSkillPoint.m_nCurPoint >= nMaxPoint)  
结果 m_oSkillPoint.m_nCurPoint 是负数的
[2018/9/21]入坑

:bug0002
协议中,清空了数据,接着发消息给前端.
应该,先发消息,在清空数据
总结:数据处理流程混乱,或者说发消息总是多样化的
[2018/9/21]入坑

:bug0001
指针没有判空
[2018/9/21]入坑

:变量构造_没有_初始化
本来是计划:进入_功能入口在_初始化的.
接着代码_改个_几版_就乱了.
总结:还是构造的时候初始化了_安全
[2018/6/8]入坑


:代码_变量多了,名字就快重复了
在开发新功能时,在变量定义在xx对象.接着_因为名字太长,而整理到一个 子对象中.
总结:变量名字很关键
[2018/6/2]入坑

:做用户调查时,或和陌生人说话时
最好让答案_变成是或不是.
否则_对方不是误会了_就是答非所问.
避免_调查对象是异性_对方很容易误会
[2018/5/5]入坑

:盲目的自信
仅仅凭_推理就_相信自己一定是对的.
结果却不一定.(list 迭代器的 数据模型的理解)
[2018/5/10]入坑

:lua中一个参数永远为nill
因为,参数个数不一致
[2018/5/9]入坑

:离线数据_公共数据
个人数据[A]
公共数据[B] [如果有多个缓存,那么不能有_随机逻辑_找最小值逻辑_set操作]

案例:修改A,涉及B
方案:查询/缓存B , 在game上处理A

案例:修改B,涉及A
方案:查询/缓存A , 在db上处理B

案例:修改A,涉及B,同时修改B
方案:查询/缓存B , 在game上处理A , 然后 修改B
[2017/12/29]入坑


:lua中一个参数永远为nill
因为,写错变量名字了
[2017/12/20]入坑

:不能反查浏览器的参数
[2017/11/3]我设置了新参数_无效_卡住进度2天

:没有死机堆栈
有人在做control-c信号,结果弄错了,将死机信号给捕获了
signal(SIGSEGV, OnCrashHandler);
[2017/11/3]入坑


:数值1和小写的L 傻傻分不清楚
[2017/11/3]入坑


:要有主见_做真正的自己
唱歌难听_还上台唱(不是重在参与,而是犯傻了)
如果不能将事情做的完美_就不要上台展示
[在扬讯时]入坑


:宏的使用技巧_经常忘记
#define Conn(x,y) x##y
#define ToChar(x) #@x
#define ToString(x) #x

:外网操作流程
每次_启动服务后_要确保_监控正常_监控正常_监控正常
每次_更新配置_一定要知道差异
每周_人工检测一次_服务和监控


























