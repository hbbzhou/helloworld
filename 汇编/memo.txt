

//前言
#if
Golang汇编命令解读

Golang汇编快速指南

#endif

//草稿//待整理
#if
AX BX CX DX是CPU内部的通用寄存器中的数据寄存器,数据寄存器一般用于存放参与运算的数据或运算的结果,
每一个数据寄存器都是16位的(即16个二进制位),但又可以将高,低8位分别作为两个独立的8位寄存器使用.
它们的高8位记作AH,BH,CH,DH,低8位记作AL,BL,CL,DL.这种灵活的使用方法给编程带来极大的方便,既可以处理16位数据,也能处理8位数据.

数据寄存器除了作为通用寄存器使用外,它们还有各自的习惯用法
AX 称为累加器,常用于存放算术逻辑运算中的操作数,另外所有的I/O指令都使用累加器与外设接口传送信息
BX 称为基址寄存器,常用来存放访问内在时的基地址,
CX 称为计数寄存器,在循环和串操作指令中用作计数器
DX 称为数据寄存器,在寄存器间接寻址中的I/O指令中存放I/O端口的地址
另外,在做双字长乘除法运算时,DX 与AX合起来存放一个双字长数(32位),其中DX存放高16位,AX存放低16位.
#endif


func retInt(v int) *int {
	return &v
}
		0x0000 00000 (test.go:27)       TEXT    "".retInt(SB), $24-16
		0x0000 00000 (test.go:27)       MOVQ    TLS, CX
		0x0009 00009 (test.go:27)       MOVQ    (CX)(TLS*2), CX
		0x0010 00016 (test.go:27)       CMPQ    SP, 16(CX)
		0x0014 00020 (test.go:27)       JLS     80
		0x0016 00022 (test.go:27)       SUBQ    $24, SP
		0x001a 00026 (test.go:27)       MOVQ    BP, 16(SP)
		0x001f 00031 (test.go:27)       LEAQ    16(SP), BP
		0x0024 00036 (test.go:27)       FUNCDATA        $0, gclocals・f207267fbf96a0178e8758c6e3e0ce28(SB)
		0x0024 00036 (test.go:27)       FUNCDATA        $1, gclocals・33cdeccccebe80329f1fdbee7f5874cb(SB)
		0x0024 00036 (test.go:27)       LEAQ    type.int(SB), AX
		0x002b 00043 (test.go:27)       MOVQ    AX, (SP)
		0x002f 00047 (test.go:27)       PCDATA  $0, $0
		0x002f 00047 (test.go:27)       CALL    runtime.newobject(SB)
		0x0034 00052 (test.go:27)       MOVQ    8(SP), AX
		0x0039 00057 (test.go:27)       MOVQ    "".v+32(FP), CX
		0x003e 00062 (test.go:27)       MOVQ    CX, (AX)
		0x0041 00065 (test.go:28)       MOVQ    AX, "".~r1+40(FP)
		0x0046 00070 (test.go:28)       MOVQ    16(SP), BP
		0x004b 00075 (test.go:28)       ADDQ    $24, SP
		0x004f 00079 (test.go:28)       RET
		0x0050 00080 (test.go:28)       NOP
		0x0050 00080 (test.go:27)       PCDATA  $0, $-1
		0x0050 00080 (test.go:27)       CALL    runtime.morestack_noctxt(SB)
		0x0055 00085 (test.go:27)       JMP     0
		



