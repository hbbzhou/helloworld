
//前言
#if
[百度 Go编码规范指南]
http://studygolang.com/articles/2059

@学习链接
http://www.runoob.com/go/go-tutorial.html
http://www.yiibai.com/go/go_echo.html#go_echo

@安装
sudo yum install golang

@常用命令
go build
go run test.go

:go的 特殊
没有构造函数
new 相当一个函数
defer 一个函数退出时,运行的语句

#endif

//显示到屏幕
#if 0
func print_() {
	var a = "w3cschool菜鸟教程"
	var b = "w3cschool.cc"
	var c bool

	println(a, b, c)
	fmt.Printf("hello, ,world \n")
}
#endif

//map 容器的使用
#if 0

func map_() {
	countryCapitalMap := make(map[string]string)
	countryCapitalMap["France"] = "Paris"
	countryCapitalMap["Italy"] = "Rome"
	countryCapitalMap["Japan"] = "Tokyo"
	countryCapitalMap["India"] = "New Delhi"

	for country := range countryCapitalMap {
		fmt.Println("Capital of", country, "is", countryCapitalMap[country])
	}

	//查找key是否存在
	captial, ok := countryCapitalMap["United States"]
	if ok {
		fmt.Println("Capital of United States is", captial)
	} else {
		fmt.Println("Capital of United States is not present")
	}

}

#endif

//类的使用
#if 0
type S struct {
	i int
}

func (p *S) Get() int {
	return p.i
}

func (p *S) Set(v int) {
	p.i = v
}

func main() {
	var hbb = new(S)
	hbb.Set(6)
	println(hbb.Get())
}
#endif

//接口//备注:封装接口时,超容易
#if 0

type S struct {
	i int
}

func (p *S) Get() int {
	return p.i
}

func (p *S) Set(v int) {
	p.i = v
}

type I interface {
	Get() int
	Set(int)
}

func f(p I) {
	fmt.Println(p.Get())
	p.Set(1)
}

func main() {
	var oS = new(S)
	oS.Set(100)
	f(oS)
}
#endif

//工厂模式
#if

func initDealFun() {
	mapDealFun := make(map[int]iGameDealOne)
	mapDealFun[1] = new(msg1)
}

//IGameDeal 处理消息的接口//把这个看成函数指针
type iGameDealOne interface {
	dealOneMsg(msgContent string, oClient NetClient)
}
//看成 类的定义
type msg1 struct {
}

//处理消息//看成类的实现
func (p *msg1) dealOneMsg(msgContent string, oClient NetClient) {
	//oClient.sendMsg([]byte(" deal msg ok\n "))
}
#endif

//switch 用法
#if 0

type S struct {
	i int
}

func (p *S) Get() int {
	return p.i
}

func (p *S) Set(v int) {
	p.i = v
}

type I interface {
	Get() int
	Set(int)
}

type R struct{ i int }

func (p *R) Get() int {
	return p.i
}
func (p *R) Set(v int) {
	p.i = v
}

func f(p I) {

	switch t := p.(type) { // 判断传递给 p 的实际类型
	case *S: 
		println("指向 S 的指针类型", t)
	case *R: 
		println("指向 R 的指针类型", t)
	default: 
		println("实现了 I 接口的其他类型", t)
	}
	fmt.Println(p.Get())
	p.Set(1)
}

func main() {
	var oS = new(R)
	f(oS)
}
#endif

//获取时间戳
#if 0
	t := time.Now().Unix()
	fmt.Println(t)
	fmt.Println(time.Now().Format("2006/01/02"))
#endif

//并发
#if 0

const gTheadNum = 8
const gOneConut = 100000
const gConut = gOneConut * gTheadNum

var gCurNum int
var gBegin, gEnd, gDiff int64

func test_print() {
	for i := 0; i < 10000; i++ {
		var b int = i * i * i
		b += 10
	}
	gCurNum++
}

func test2(done chan bool) {
	for i := 0; i < gOneConut; i++ {
		test_print()
	}
	done <- true
}

func test1() {
	for i := 0; i < gConut; i++ {
		test_print()
	}
}

func wait() {
	a := ""
	fmt.Println("wait...")
	fmt.Scanf("%s", &a)
	fmt.Println(a)
}

func main() {

	var oMap = make(map[string]int64)

	{
		runtime.GOMAXPROCS(4)
		done := make(chan bool)
		gCurNum = 0
		gBegin = time.Now().UnixNano()

		for i := 0; i < gTheadNum; i++ {
			go test2(done)
		}

		for i := 0; i < gTheadNum; i++ {
			<-done
		}

		gEnd = time.Now().UnixNano()
		gDiff = (gEnd - gBegin) / (1000 * 1000)

		wait()
		oMap["多线程_耗时"] = gDiff
	}

	{
		gCurNum = 0
		gBegin = time.Now().UnixNano()
		test1()
		gEnd = time.Now().UnixNano()
		gDiff = (gEnd - gBegin) / (1000 * 1000)

		wait()
		oMap["单线程_耗时"] = gDiff
	}

	println("run times: ", gConut)
	for key, value := range oMap {
		println(key, value/1000, "s", value%1000, "ms")
	}
	fmt.Printf("[end...]  \n")

}

// run times:  800000//windows(8核cup)
// 多线程_耗时 0 s 700 ms
// 单线程_耗时 2 s 225 ms


//run times:  800000//linux(4核cup)
//多线程_耗时 1 s 22 ms
//单线程_耗时 2 s 227 ms

#endif

//c++多线程//windows
#if 
#include <windows.h>  
#include <ctime>
#include <thread>

long GetCurrentTime()
{
	struct timeb tv;
	ftime(&tv);
	return ((long)tv.time) * 1000 + (long)tv.millitm;
}


const int g_thead_num = 8;
const int gOneConut = 100000;
const int gConut = gOneConut * g_thead_num;
int gCurNum = 0;
clock_t gBegin, gEnd, gDiff;

inline void test_print() {
	for (int i = 0; i < 10000; ++i) {
		int b = i*i*i;
		b += 10;
	}
	gCurNum++;
}

void clear()
{
	gCurNum = 0;
}

void test2()
{
	for (int i = 0; i < gOneConut; ++i) {
		test_print();
	}
}

void test1()
{
	for (int i = 0; i < gConut; ++i) {
		test_print();
	}
}

void test_main()
{
	std::map<std::string, int> map_;

	{
		gBegin = GetCurrentTime();
		test1();
		gEnd = GetCurrentTime();
		gDiff = (gEnd - gBegin);

		system("pause");
		map_["单线程_耗时"] = gDiff;
		clear();
	}

	{
		std::vector<std::thread *> vec_;
		gBegin = GetCurrentTime();
		for (int i = 0; i < g_thead_num; ++i) {
			vec_.push_back(new std::thread(test2));
		}

		for (int i = 0; i < g_thead_num; ++i) {
			vec_[i]->join();
		}
		gEnd = GetCurrentTime();
		gDiff = (gEnd - gBegin);

		for (int i = 0; i < g_thead_num; ++i) {
			delete vec_[i];
		}
		system("pause");
		map_["多线程_耗时"] = gDiff;
		clear();
	}

	printf("run times %d  \n", gConut);
	for (std::map<std::string, int>::const_iterator it = map_.begin(); it != map_.end(); ++it) {
		printf("%s %d s %d ms \n", it->first.c_str(), it->second/ 1000, it->second%1000);
	}
}

//windows(8核cup)
//run times 800000
//单线程_耗时 17 s 917 ms
//多线程_耗时 3 s 118 ms


#endif

//c++多线程//linux
#if

#include <map>
#include <stdio.h>
#include <time.h>
#include <sstream> 
#include <sys/timeb.h>

#include <vector>
#include <pthread.h>


long GetCurrentTime()
{
	struct timeb tv;
	ftime(&tv);
	return ((long)tv.time) * 1000 + (long)tv.millitm;
}

const int g_thead_num = 8;
const int gOneConut = 100000;
const int gConut = gOneConut * g_thead_num;
int gCurNum = 0;
clock_t gBegin, gEnd, gDiff;


inline void test_print() {
	for (int i = 0; i < 10000; ++i) {
		int b = i*i*i;
		b += 10;
	}
	gCurNum++;
}

void clear(){	gCurNum = 0;}

void * test2(void *arg)
{
	for (int i = 0; i < gOneConut; ++i) {
		test_print();
	}
	return NULL;
}

void test1()
{
	for (int i = 0; i < gConut; ++i) {
		test_print();
	}
}

int main()
{
	std::map<std::string, int> map_;

	{
		gBegin = GetCurrentTime();
		test1();
		gEnd = GetCurrentTime();
		gDiff = (gEnd - gBegin);
    
		map_["单线程_耗时"] = gDiff;
		clear();
	}

	{
		std::vector<pthread_t> vec_;
		gBegin = GetCurrentTime();
		for (int i = 0; i < g_thead_num; ++i) {
			pthread_t id;
			if(pthread_create(&id,NULL, test2 , NULL))
			{
				printf("Fail to Create Thread");
				return -1;
			}
			
			vec_.push_back(id);
		}
    
		for (int i = 0; i < g_thead_num; ++i) {
			pthread_join(vec_[i], NULL);
		}
		gEnd = GetCurrentTime();
		gDiff = (gEnd - gBegin);
    
		map_["多线程_耗时"] = gDiff;
		clear();
	}

	printf("run times %d  \n", gConut);
	for (std::map<std::string, int>::const_iterator it = map_.begin(); it != map_.end(); ++it) {
		printf("%s %d s %d ms \n", it->first.c_str(), it->second/ 1000, it->second%1000);
	}
	return 0;
}
//g++ main.c  -o main  -lpthread
//linux(4核cpu)
//run times 800000  
//单线程_耗时 19 s 736 ms 
//多线程_耗时 6 s 237 ms 
//
//real	0m25.974s
//user	0m44.044s
//sys	0m0.001s

#endif

//设置 函数退出前,执行的语句
#if

func ReadWrite() bool {
    file.Open("file")
    defer file.Close()
    if failureX {
        return false
    }
    if failureY {
        return false
    }
    return true
}
#endif

//protobuff 的使用
#if

/*
[安装][百度 go protobuff 安装]
1.由于外网经常被封，把go版本的protobuf下载到本地，基本上是protobuf-master.zip这个形式。
go版本的protobuf的下载地址为https://github.com/golang/protobuf
2.将这个protobuf-master.zip加压后，改名为protobuf目录，并且在当前go工程的src目录下，新建一个子目录 github.com ，然后进入，
再新建一个子目录golang然后把刚才改名为protobuf的目录，全部拷贝到刚才的golang文件夹里面 ok！

3.在linux平台下，进入此protobuf文件夹，make 就OK了，会生成protoc可执行文件在gobin文件里里面，并且生成相关的.a文件在当前go工程的pkg文件夹里。
4.在windows平台下，我使用的是LiteIDE工具，先在proto文件夹上右键点击go install ， 然后在protoc-gen-go文件夹上右键点击go install。
在当前go工程的bin文件夹下会生成protoc-gen-go可执行文件进入自定义的.proto文件所在的文件夹，
输入命令 protoc  --go_out=./ ***.proto，则在当前文件夹下生成***.go文件。
*/

/*
 [命令]
 protoc --go_out=go_proto test_user.proto test.proto

 [test.proto 文件]
 package example;

 enum FOO { X = 17; };

 message Test {
 optional string label = 1;
 optional int32 type = 2 [default=77];
 optional int64 reps = 3;
 }

 [test_user.proto 文件]
 import "test.proto";
 package example;

 message player {
 	optional string name = 1;
 	optional Test info = 2;
 }
*/

import (
	"example"
	"fmt"

	"github.com/golang/protobuf/proto"
)

func init() {
	fmt.Printf("[auto run] init \n")
}

func wait() {
	a := ""
	fmt.Println("wait...")
	fmt.Scanf("%s", &a)
	fmt.Println(a)
}

func main() {
	test := &example.Player{
		Name: proto.String("zhou"),
		Info: &example.Test{
			Label: proto.String("hbb"),
		},
	}

	println(test.GetName(), test.GetInfo().GetLabel())
}


#endif

//客户端_联网
#if

//整形转换成字节
func intToBytes(n int) []byte {
	x := uint16(n)

	bytesBuffer := bytes.NewBuffer([]byte{})
	binary.Write(bytesBuffer, binary.BigEndian, x)
	return bytesBuffer.Bytes()
}

//字节转换成整形
func bytesToInt(b []byte) int {
	bytesBuffer := bytes.NewBuffer(b)

	var x uint16
	binary.Read(bytesBuffer, binary.BigEndian, &x)
	return int(x)
}

const _HeaderLength = 2
const _IDLength = 2

type GameClient struct {
	strName      string
	strIPAndPort string
	oConn        net.Conn
	oReaderChan  chan []byte
}

type IGameDeal interface {
	dealMsg(chan []byte, GameClient)
}

type DealLogin struct {
}

//处理消息
func (p *DealLogin) dealMsg(readerChannel chan []byte, oClient GameClient) {
	for {
		select {
		case data := <-readerChannel:
			msgLen := len(data)
			if msgLen < _IDLength {
				println("error ")
			} else {
				msgID := bytesToInt(data[0:_HeaderLength])
				println("[login]消息id:", msgID, "内容:", string(data[_HeaderLength:]))
				//oClient.sendMsg([]byte(" deal msg ok\n "))
			}
		}
	}
}

type DealGate struct {
}

//处理消息
func (p *DealGate) dealMsg(readerChannel chan []byte, oClient GameClient) {
	for {
		select {
		case data := <-readerChannel:
			msgLen := len(data)
			if msgLen < _IDLength {
				println("error ")
			} else {
				msgID := bytesToInt(data[0:_HeaderLength])
				println("[gate]消息id:", msgID, "内容:", string(data[_HeaderLength:]))
				//oClient.sendMsg([]byte(" deal msg ok\n "))
			}
		}
	}
}

//封包
func (p *GameClient) enpack(message []byte) []byte {
	return append(append(intToBytes(len(message)+_IDLength), intToBytes(10)...), message...)
}

//解析正文
func (p *GameClient) depackContent(buffer []byte) {
	msgLen := len(buffer)
	if msgLen < _IDLength {
		println("error ")
	} else {
		msgID := bytesToInt(buffer[0:_HeaderLength])
		println("消息id:", msgID, "内容:", string(buffer[_HeaderLength:]))
	}
}

//解包
func (p *GameClient) depack(buffer []byte, readerChannel chan []byte) []byte {
	length := len(buffer)

	var i int
	for i = 0; i < length; {
		if length < i+_HeaderLength {
			break
		}
		msgLen := bytesToInt(buffer[i : i+_HeaderLength])
		println("消息长度:", msgLen)

		if length < i+_HeaderLength+msgLen {
			break
		}
		data := buffer[i+_HeaderLength : i+_HeaderLength+msgLen]
		readerChannel <- data
		i = i + _HeaderLength + msgLen
	}

	if i == length {
		return make([]byte, 0)
	}
	return buffer[i:]
}

//发送消息
func (p *GameClient) sendMsg(msg []byte) (int, error) {
	return p.oConn.Write(p.enpack(msg))
}

//连接服务器
//等同于 c++模版connectServer(string, T)
//编写顺序:先定义 [类] , 接着 定义 [接口]
func (p *GameClient) connectServer(ip string, deal IGameDeal) {
	p.strIPAndPort = ip
	//连接
	var err error
	p.oConn, err = net.Dial("tcp", p.strIPAndPort)
	p.checkError(err)
	fmt.Println(p.strName, " 连接成功!")

	p.oReaderChan = make(chan []byte, 1024)

	//接收消息
	go deal.dealMsg(p.oReaderChan, *p)
	go p.readAll(p.oConn, p.oReaderChan)

	inputReader := bufio.NewReader(os.Stdin)
	//如果quit就退出
	for {
		input, _ := inputReader.ReadString('\n')
		trimInput := strings.Trim(input, "\r\n")
		if trimInput == "quit" {
			fmt.Println("再见")
			time.Sleep(1 * time.Second)
			return
		}

		p.sendMsg([]byte(trimInput))
	}
}

//
func (p *GameClient) readAll(conn net.Conn, readerChannel chan []byte) {

	// 缓冲区，存储被截断的数据
	defer conn.Close()
	tmpBuffer := make([]byte, 0)
	buffer := make([]byte, 1024)
	for {
		n, err := conn.Read(buffer)
		if err != nil {
			fmt.Println(conn.RemoteAddr().String(), " connection error: ", err)
			return
		}

		tmpBuffer = p.depack(append(tmpBuffer, buffer[:n]...), readerChannel)
	}
}

func (p *GameClient) checkError(err error) {
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s Fatal error: %s", p.strName, err.Error())
		os.Exit(1)
	}
}

//
func main() {
	oClient := new(GameClient)
	//oDealLogin := new(DealLogin)
	oDealGate := new(DealGate)
	oClient.connectServer("localhost:2017", oDealGate)

	fmt.Printf("[end...]  \n")
}

#endif

//变量为_引用赋值?
#if

func main() {
	num := 6
	num2 := num //内容拷贝
	num += 2
	println(num2)
}

func main() {
	str := "6"	//go 的string 类似int类型 是内容拷贝
	str1 := str //内容拷贝
	str += "2"
	println(str)
	println(str1)
}

func main() {
	pbuffer := make([]byte, 1024)
	pbuffer1 := pbuffer	//内容拷贝//内容为地址
	pbuffer[0] = 5
	println(pbuffer[0])
	println(pbuffer1[0])
}

func main() {
	pmap := make(map[int]string)
	pmap2 := pmap	//内容拷贝//内容为地址
	pmap[0] = "5"
	println(pmap[0])
	println(pmap2[0])
}

func main() {
	ptestOne := new(test)
	ptestOne1 := ptestOne	//内容拷贝//内容为地址
	ptestOne.num = 5
	println(ptestOne)
	println(ptestOne1)
	println(ptestOne.num)
	println(ptestOne1.num)
}


#endif

//参数为_引用传递?
#if 

type test struct {
	num int
}

//参数是个地址
func test1(pTest *test) {
	pTest.num = 6
}

//参数是一个拷贝
func test2(pTest test) {
	pTest.num = 6
}

func main() {
	ptestOne := new(test)
	ptestOne1 := ptestOne
	test2(*ptestOne)
	println(ptestOne.num) //输出0
	println(ptestOne1.num)//输出0
	test1(ptestOne)
	println(ptestOne.num)//输出6
	println(ptestOne1.num)//输出6
}

#endif















